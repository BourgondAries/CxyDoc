Cxy is almost pseudo-code.
<pre>
dijkstra(graph source):
	q = Set()
	dist = VertexMap()
	prev = dist
	foreach vertex in graph:
		dist[vertex] = inf
		prev[vertex] = nan
		q.add(vertex)

	dist[source] = 0

	while q.isNotEmpty():
		u = dist.getMinimalDistance()
		q.remove(u)

		foreach vertex in u.neighbours():
			alt = dist[u] + length(u, vertex)
			if alt < dist[vertex]:
				dist[vertex] = alt
				prev[vertex] = u

	return dist, prev

</pre>

Compare the above to the actual pseudocode from wikipedia
<pre>
function Dijkstra(Graph, source):

	create vertex set Q

	for each vertex v in Graph:             // Initialization
		dist[v] <- INFINITY                  // Unknown distance from source to v
		prev[v] <- UNDEFINED                 // Previous node in optimal path from source
		add v to Q                          // All nodes initially in Q (unvisited nodes)

	dist[source] <- 0                        // Distance from source to source

	while Q is not empty:
		u <- vertex in Q with min dist[u]    // Source node will be selected first
		remove u from Q

		for each neighbor v of u:           // where v is still in Q.
			alt <- dist[u] + length(u, v)
			if alt < dist[v]:               // A shorter path to v has been found
				dist[v] <- alt
				prev[v] <- u

	return dist[], prev[]
</pre>
